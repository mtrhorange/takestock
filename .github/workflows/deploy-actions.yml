name: Build and Deploy Microservices to EC2

on:
  push:
    branches: [release] # or whatever branch you want for deployment

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_KEY }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Images
        run: |
          # Build and push service-registry
          cd service-registry
          docker build -t ${{ secrets.DOCKER_USERNAME }}/service-registry:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/service-registry:latest
          cd ..

          # Build and push config-service
          cd config-server
          docker build -t ${{ secrets.DOCKER_USERNAME }}/config-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/config-service:latest
          cd ..

          # Build and push api-gateway
          cd api-gateway
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
          cd ..

          # Build and push user-service
          cd userService
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          cd ..
          
          # Build and push order-service
          cd orderService
          docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/order-service:latest
          cd ..
          
          # Build and push product-service
          cd productService
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service:latest
          cd ..
  deploy-gateway:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Prepare Deploy Script
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy Service Registry
        run: bash deploy.sh service-registry service-registry 8761
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.GATEWAY_HOST }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GATEWAY_URL: ${{ secrets.GATEWAY_URL }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PW: ${{ secrets.SQL_PW }}
          SQL_USER: ${{ secrets.SQL_USER }}

      - name: Deploy Config Service
        run: bash deploy.sh config-service config-service 8088
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.GATEWAY_HOST }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GATEWAY_URL: ${{ secrets.GATEWAY_URL }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PW: ${{ secrets.SQL_PW }}
          SQL_USER: ${{ secrets.SQL_USER }}

      - name: Deploy API Gateway
        run: bash deploy.sh api-gateway api-gateway 8060
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.GATEWAY_HOST }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GATEWAY_URL: ${{ secrets.GATEWAY_URL }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PW: ${{ secrets.SQL_PW }}
          SQL_USER: ${{ secrets.SQL_USER }}
  deploy-user-service:
    runs-on: ubuntu-latest
    needs: deploy-gateway
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Prepare Deploy Script
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy User Service
        run: bash deploy.sh user-service user-service 8083
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.USER_SERVICE_HOST }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GATEWAY_URL: ${{ secrets.GATEWAY_URL }}
          SERVICE_URL: ${{ secrets.USER_SERVICE_URL }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PW: ${{ secrets.SQL_PW }}
          SQL_USER: ${{ secrets.SQL_USER }}

      - name: Deploy Order Service
        run: bash deploy.sh order-service order-service 8085
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.USER_SERVICE_HOST }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GATEWAY_URL: ${{ secrets.GATEWAY_URL }}
          SERVICE_URL: ${{ secrets.USER_SERVICE_URL }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PW: ${{ secrets.SQL_PW }}
          SQL_USER: ${{ secrets.SQL_USER }}
  deploy-product-service:
    runs-on: ubuntu-latest
    needs: deploy-gateway
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Prepare Deploy Script
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: Deploy Product Service
        run: bash deploy.sh product-service product-service 8084
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.PRODUCT_SERVICE_HOST }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GATEWAY_URL: ${{ secrets.GATEWAY_URL }}
          SERVICE_URL: ${{ secrets.PRODUCT_SERVICE_URL }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PW: ${{ secrets.SQL_PW }}
          SQL_USER: ${{ secrets.SQL_USER }}
